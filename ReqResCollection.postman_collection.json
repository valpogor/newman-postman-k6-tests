{
	"info": {
		"_postman_id": "ff4ffc5b-79c3-4846-a411-a216072fc30c",
		"name": "ReqResCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Fetches a resource list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")",
							"pm.test(\"Verify Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"console.log(\"Response code is : \" + pm.response.code)",
							"",
							"",
							"pm.test(\"Verify staus is OK\",()=> {",
							"    pm.expect(\"OK\").eql(pm.response.status)",
							"})",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", () => {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"cookies is empty\", () => {",
							"  pm.expect(pm.cookies.has('')).to.be.false;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/{{resource}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"{{resource}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetches a user list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")\r",
							"pm.test(\"Verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log(\"Response code is : \" + pm.response.code)\r",
							"\r",
							"\r",
							"pm.test(\"Verify staus is OK\",()=> {\r",
							"    pm.expect(\"OK\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"cookies is empty\", () => {\r",
							"  pm.expect(pm.cookies.has('')).to.be.false;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Request for fetching list of users\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetches a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")",
							"pm.test(\"Verify Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"console.log(\"Response code is : \" + pm.response.code)",
							"",
							"",
							"pm.test(\"Verify staus is OK\",()=> {",
							"    pm.expect(\"OK\").eql(pm.response.status)",
							"})",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", () => {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"cookies is empty\", () => {",
							"  pm.expect(pm.cookies.has('')).to.be.false;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/users/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Updates a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")\r",
							"pm.test(\"Verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log(\"Response code is : \" + pm.response.code)\r",
							"\r",
							"\r",
							"pm.test(\"Verify staus is OK\",()=> {\r",
							"    pm.expect(\"OK\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"cookies is empty\", () => {\r",
							"  pm.expect(pm.cookies.has('')).to.be.false;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Smita\",\r\n    \"job\": \"Mentor\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Updates a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")\r",
							"pm.test(\"Verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log(\"Response code is : \" + pm.response.code)\r",
							"\r",
							"\r",
							"pm.test(\"Verify staus is OK\",()=> {\r",
							"    pm.expect(\"OK\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"cookies is empty\", () => {\r",
							"  pm.expect(pm.cookies.has('')).to.be.false;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Smita\",\r\n    \"job\": \"Mentor\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "id",
						"value": "196",
						"type": "default",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetches an unknown resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")",
							"pm.test(\"Verify Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"console.log(\"Response code is : \" + pm.response.code)",
							"",
							"",
							"pm.test(\"Verify staus is OK\",()=> {",
							"    pm.expect(\"OK\").eql(pm.response.status)",
							"})",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", () => {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"cookies is empty\", () => {",
							"  pm.expect(pm.cookies.has('')).to.be.false;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/{{resource}}/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Updates an unknown resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")\r",
							"pm.test(\"Verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log(\"Response code is : \" + pm.response.code)\r",
							"\r",
							"\r",
							"pm.test(\"Verify staus is OK\",()=> {\r",
							"    pm.expect(\"OK\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"cookies is empty\", () => {\r",
							"  pm.expect(pm.cookies.has('')).to.be.false;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Smita\",\r\n    \"job\": \"Mentor\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/{{resource}}/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Updates an unknown resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")\r",
							"pm.test(\"Verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log(\"Response code is : \" + pm.response.code)\r",
							"\r",
							"\r",
							"pm.test(\"Verify staus is OK\",()=> {\r",
							"    pm.expect(\"OK\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"cookies is empty\", () => {\r",
							"  pm.expect(pm.cookies.has('')).to.be.false;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Smita\",\r\n    \"job\": \"Mentor\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/{{resource}}/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"{{resource}}",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Deletes an unknown resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "id",
						"value": "196",
						"type": "default",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/{{resource}}/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"{{resource}}",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creates a session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")\r",
							"pm.test(\"Verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log(\"Response code is : \" + pm.response.code)\r",
							"\r",
							"\r",
							"pm.test(\"Verify staus is OK\",()=> {\r",
							"    pm.expect(\"OK\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"cookies is empty\", () => {\r",
							"  pm.expect(pm.cookies.has('')).to.be.false;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creates a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")\r",
							"pm.test(\"Verify Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log(\"Response code is : \" + pm.response.code)\r",
							"\r",
							"\r",
							"pm.test(\"Verify staus is OK\",()=> {\r",
							"    pm.expect(\"OK\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"cookies is empty\", () => {\r",
							"  pm.expect(pm.cookies.has('')).to.be.false;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creates a user Negative",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"list of users fetched\")\r",
							"pm.test(\"Verify Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"console.log(\"Response code is : \" + pm.response.code)\r",
							"\r",
							"\r",
							"pm.test(\"Verify staus is error\",()=> {\r",
							"    pm.expect(\"Bad Request\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"pm.test(\"cookies is empty\", () => {\r",
							"  pm.expect(pm.cookies.has('')).to.be.false;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ends a session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify staus is Created\",()=> {\r",
							"    pm.expect(\"Created\").eql(pm.response.status)\r",
							"})\r",
							"\r",
							"jsonData=pm.response.json()\r",
							"\r",
							"pm.collectionVariables.set(\"id\", jsonData.id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/logout ",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"logout "
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in"
		},
		{
			"key": "username",
			"value": "admin",
			"type": "default"
		},
		{
			"key": "myJob",
			"value": "first",
			"type": "default"
		},
		{
			"key": "id",
			"value": "196",
			"type": "default"
		},
		{
			"key": "resource",
			"value": "unknown",
			"type": "default"
		},
		{
			"key": "email",
			"value": "eve.holt@reqres.in",
			"type": "default"
		},
		{
			"key": "password",
			"value": "pistol",
			"type": "default"
		},
		{
			"key": "token",
			"value": "QpwL5tke4Pnpja7X4",
			"type": "default"
		}
	]
}
